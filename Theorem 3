#include <stdio.h>
#include <math.h>

double delta(int m) {
    return (m > 0) ? 1.0 : 0.0;
}

double P_i0(int i) {
    return 1 - 4 * delta(i - 1) * pow(255, -1) + 10 * delta(i - 2) * pow(255, -2) - 20 * delta(i - 3) * pow(255, -3);
}

double P_ij(int i, int j) {
    if (j > 0) {
        return delta(i - j) * pow(255, -j) - 4 * delta(i - j - 1) * pow(255, -(j + 1)) + 10 * delta(i - j - 2) * pow(255, -(j + 2));
    } else {
        return P_i0(i);
    }
}

double P_igj(int i, int j) {
    return delta(i - j) * pow(255, -j) - j * (delta(i - j - 1) * pow(255, -(j + 1)) - delta(i - j - 2) * pow(255, -(j + 2)));
}

double combination(int n, int k) {
    if (k > n || k < 0) return 0;
    if (k == 0 || k == n) return 1;
    double result = 1;
    for (int i = 1; i <= k; i++) {
        result *= (n - i + 1) / (double)i;
    }
    return result;
}

double permutation(int n, int r) {
    if (r > n || r < 0) return 0;
    double result = 1;
    for (int i = 0; i < r; i++) {
        result *= (n - i);
    }
    return result;
}

double factorial(int n) {
    if (n < 0) return 0;
    if (n == 0 || n == 1) return 1;
    double result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}

double G(int j1, int j2, int j3, int j4) {
    int min_val = j1;
    if (j2 < min_val) min_val = j2;
    if (j3 < min_val) min_val = j3;
    if (j4 < min_val) min_val = j4;


    double sum = 0.0;
    for (int ell = 0; ell <= min_val - 1; ell++) {
        double term = 4 * combination(4, ell)
                      * P_ij(j1, ell)
                      * P_ij(j2, ell)
                      * P_ij(j3, ell)
                      * P_ij(j4, ell)
                      * pow(P_ij(4, 3), 4 - ell);
        sum += term;
    }
    return sum;
}

double compute_triple_sum(int m) {
    double total = 0.0;
    int i;
    for (i = 1; i <= 4; i++) {
        double term = combination(4, i) * P_ij(m, 4 - i) * (
            G(4,4,4,4) * pow(P_ij(i, 0), 4)
            +
            16 * G(3,4,4,4) * pow(P_ij(i, 0), 3) * P_ij(i, 1)
            +
            G(3,3,4,4) * (
                72 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 1), 2) +
                24 * pow(P_ij(i, 0), 3) * P_ij(i, 2)
            ) +
            G(3,3,3,4) * (
                96 * P_ij(i, 0) * pow(P_ij(i, 1), 3) +
                144 * pow(P_ij(i, 0), 2) * P_ij(i, 1) * P_ij(i, 2) +
                16 * pow(P_ij(i, 0), 3) * P_ij(i, 3)
            ) +
            G(3,3,3,3) * (
                24 * pow(P_ij(i, 1), 4) +
                144 * P_ij(i, 0) * pow(P_ij(i, 1), 2) * P_ij(i, 2) +
                36 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 2), 2) +
                48 * pow(P_ij(i, 0), 2) * P_ij(i, 1) * P_ij(i, 3)
            ) +
            24 * G(2,4,4,4) * pow(P_ij(i, 0), 2) * pow(P_ij(i, 1), 2)
            +
            16 * G(1,4,4,4)* P_ij(i, 0) * pow(P_ij(i, 1), 3)
            +
            G(2,3,4,4) * (
                144 * P_ij(i, 0) * pow(P_ij(i, 1), 3) +
                144 * pow(P_ij(i, 0), 2) * P_ij(i, 1) * P_ij(i, 2)
            ) +
            G(1,3,4,4) * (
                48 * pow(P_ij(i, 1), 4) +
                144 * P_ij(i, 0) * pow(P_ij(i, 1), 2) * P_ij(i, 2)
            ) +
            G(1,1,4,4) * (
                72 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 2), 2) +
                24 * P_ij(i, 0) * pow(P_ij(i, 2), 3)
            ) +
            G(1,3,3,3) * (
                432 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 2), 2) +
                96 * P_ij(i, 0) * pow(P_ij(i, 2), 3) +
                288 * P_ij(i, 0) * P_ij(i, 1) * P_ij(i, 2) * P_ij(i, 3) +
                160 * pow(P_ij(i, 1), 3) * P_ij(i, 3)
            ) +
            G(1,3,3,4) * (
                336 * pow(P_ij(i, 1), 3) * P_ij(i, 2) +
                288 * P_ij(i, 0) * P_ij(i, 1) * pow(P_ij(i, 2), 2) +
                144 * P_ij(i, 0) * pow(P_ij(i, 1), 2) * P_ij(i, 3)
            ) +
            G(2,3,3,4) * (
                144 * pow(P_ij(i, 1), 4) +
                720 * P_ij(i, 0) * pow(P_ij(i, 1), 2) * P_ij(i, 2) +
                144 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 2), 2) +
                144 * pow(P_ij(i, 0), 2) * P_ij(i, 1) * P_ij(i, 3)
            ) +
            G(2,3,3,3) * (
                336 * P_ij(i, 0) * pow(P_ij(i, 1), 2) * P_ij(i, 3) +
                432 * pow(P_ij(i, 1), 3) * P_ij(i, 2) +
                576 * P_ij(i, 0) * P_ij(i, 1) * pow(P_ij(i, 2), 2) +
                144 * pow(P_ij(i, 0), 2) * P_ij(i, 2) * P_ij(i, 3)
            ) +
            G(2,2,4,4) * (
                36 * pow(P_ij(i, 1), 4) +
                144 * P_ij(i, 0) * pow(P_ij(i, 1), 2) * P_ij(i, 2) +
                36 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 2), 2)
            ) +
            G(1,2,4,4) * (
                144 * pow(P_ij(i, 1), 3) * P_ij(i, 2) +
                144 * P_ij(i, 0) * P_ij(i, 1) * pow(P_ij(i, 2), 2)
            ) +
            G(1,2,3,4) * (
                1152 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 2), 2) +
                576 * P_ij(i, 0) * P_ij(i, 1) * P_ij(i, 2) * P_ij(i, 3) +
                288 * P_ij(i, 0) * pow(P_ij(i, 2), 3) +
                288 * pow(P_ij(i, 1), 3) * P_ij(i, 3)
            ) +
            G(2,2,3,4) * (
                576 * pow(P_ij(i, 1), 3) * P_ij(i, 2) +
                720 * P_ij(i, 0) * P_ij(i, 1) * pow(P_ij(i, 2), 2) +
                288 * P_ij(i, 0) * P_ij(i, 3) * pow(P_ij(i, 1), 2) +
                144 * P_ij(i, 2) * P_ij(i, 3) * pow(P_ij(i, 0), 2)
            ) +
            G(2,2,3,3) * (
                1224 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 2), 2) +
                1152 * P_ij(i, 0) * P_ij(i, 1) * P_ij(i, 2) * P_ij(i, 3) +
                360 * P_ij(i, 0) * pow(P_ij(i, 2), 3) +
                72 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 3), 2) +
                432 * pow(P_ij(i, 1), 3) * P_ij(i, 3)
            ) +
            G(2,2,2,4) * (
                360 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 2), 2) +
                96 * pow(P_ij(i, 1), 3) * P_ij(i, 3) +
                96 * P_ij(i, 0) * pow(P_ij(i, 2), 3) +
                24 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 3), 2) +
                288 * P_ij(i, 0) * P_ij(i, 1) * P_ij(i, 2) * P_ij(i, 3)
            ) +
            G(2,2,2,3) * (
                336 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 1), 1) * pow(P_ij(i, 3), 2) +
                576 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 2) * P_ij(i, 3) +
                1296 * pow(P_ij(i, 1), 2) * P_ij(i, 2) * P_ij(i, 3) +
                816 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 3)
            ) +
            G(1,2,3,3) * (
                288 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 1), 1) * pow(P_ij(i, 3), 2) +
                720 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 2) * P_ij(i, 3) +
                1872 * pow(P_ij(i, 1), 2) * P_ij(i, 2) * P_ij(i, 3) +
                1296 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 3)
            ) +
            G(1,2,2,4) * (
                144 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 1), 1) * pow(P_ij(i, 3), 2) +
                288 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 2) * P_ij(i, 3) +
                720 * pow(P_ij(i, 1), 2) * P_ij(i, 2) * P_ij(i, 3) +
                576 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 3)
            ) +
            G(1,1,3,4) * (
                144 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 2) * pow(P_ij(i, 3), 1) +
                288 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 2), 1) * P_ij(i, 3) +
                336 * pow(P_ij(i, 2), 3) * P_ij(i, 1)
            ) +
            G(2,2,2,2) * (
                144 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 1) * pow(P_ij(i, 3), 2) +
                90 * pow(P_ij(i, 2), 4) +
                168 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 3), 2) +
                576 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 2) * pow(P_ij(i, 3), 1)
            ) +
            G(1,2,2,3) * (
                720 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 1) * pow(P_ij(i, 3), 2) +
                576 * pow(P_ij(i, 2), 4) +
                864 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 3), 2) +
                3456 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 2) *  pow(P_ij(i, 3), 1)
            ) +
            G(1,1,2,4) * (
                144 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 1) * pow(P_ij(i, 3), 2) +
                144 * pow(P_ij(i, 2), 4) +
                144 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 3), 2) +
                720 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 2) *  pow(P_ij(i, 3), 1)
            ) +
            G(1,1,3,3) * (
                288 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 2), 1) * pow(P_ij(i, 3), 2) +
                168 * pow(P_ij(i, 2), 4) +
                144 * pow(P_ij(i, 1), 2) * pow(P_ij(i, 3), 2) +
                864 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 2) *  pow(P_ij(i, 3), 1)
            ) +
            G(1,2,2,2) * (
                96 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 3), 3) +
                1296 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 1) * pow(P_ij(i, 3), 2) +
                816 * pow(P_ij(i, 2), 3) * pow(P_ij(i, 3), 1)
            ) +
            G(1,1,2,3) * (
                144 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 3), 3) +
                1872 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 1) * pow(P_ij(i, 3), 2) +
                1296 * pow(P_ij(i, 2), 3) * pow(P_ij(i, 3), 1)
            ) +
            G(1,1,1,4) * (
                16 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 3), 3) +
                144 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 2), 1) * pow(P_ij(i, 3), 2) +
                96 * pow(P_ij(i, 2), 3) * pow(P_ij(i, 3), 1)
            ) +
            G(1,1,2,2) * (
                1224 * pow(P_ij(i, 2), 2) * pow(P_ij(i, 3), 2) +
                432 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 3), 3)
            ) +
            G(1,1,1,3) * (
                432 * pow(P_ij(i, 2), 2) * pow(P_ij(i, 3), 2) +
                160 * pow(P_ij(i, 1), 1) * pow(P_ij(i, 3), 3))
            +432 * G(1,1,1,2) * P_ij(i,2) * pow(P_ij(i, 3), 3)
            + 24 * G(1,1,1,1) * pow(P_ij(i, 3), 4)

        );
        total += term;
    }
    return total;
}

double compute_divisor() {
    return pow(2, -94) * pow(1 - pow(2, -32), 1) * pow(1 - pow(2, -128), -1);
}

int main() {
    int m;
    printf("Enter m: ");
    scanf("%d", &m);

    double triple_sum_result = compute_triple_sum(m);
    double divisor = compute_divisor();
    double final_result_divided = triple_sum_result / divisor;
    printf("\nFinal result divided to probability of the random permutation: %.20f\n", final_result_divided);


    return 0;
}
