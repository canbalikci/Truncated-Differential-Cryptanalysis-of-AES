#include <stdio.h>
#include <math.h>

double delta(int m) {
    return (m > 0) ? 1.0 : 0.0;
}

double P_i0(int i) {
    return 1 - 4 * delta(i - 1) * pow(255, -1) + 10 * delta(i - 2) * pow(255, -2) - 20 * delta(i - 3) * pow(255, -3);
}

double P_ij(int i, int j) {
    if (j > 0) {
        return delta(i - j) * pow(255, -j) - 4 * delta(i - j - 1) * pow(255, -(j + 1)) + 10 * delta(i - j - 2) * pow(255, -(j + 2));
    } else {
        return P_i0(i);
    }
}

double P_igj(int i, int j) {
    return delta(i - j) * pow(255, -j) - j * (delta(i - j - 1) * pow(255, -(j + 1)) - delta(i - j - 2) * pow(255, -(j + 2)));
}

double combination(int n, int k) {
    if (k > n || k < 0) return 0;
    if (k == 0 || k == n) return 1;
    double result = 1;
    for (int i = 1; i <= k; i++) {
        result *= (n - i + 1) / (double)i;
    }
    return result;
}

double permutation(int n, int r) {
    if (r > n || r < 0) return 0;
    double result = 1;
    for (int i = 0; i < r; i++) {
        result *= (n - i);
    }
    return result;
}

double factorial(int n) {
    if (n < 0) return 0;
    if (n == 0 || n == 1) return 1;
    double result = 1;
    for (int i = 2; i <= n; i++) {
        result *= i;
    }
    return result;
}


double compute_triple_sum(int m) {
    double total = 0.0;
    for (int i = 1; i <= 4; i++) {
        for (int l = 0; l <= i - 1; l++) {
                double term = combination(4, i) * combination(4, l) * pow(P_ij(m, 4-i), 1)*(
                                                                                                          pow(P_igj(4, 2), 4-l) * pow(P_ij(i, l), 4)
                                                                                            + 4 * (4-l) * pow(P_igj(4, 2), 3-l) * P_ij(3, 2) * pow(P_ij(i, l), 3) * P_ij(i, l+1)

                + delta(3-l) * pow(P_igj(4, 2), 2-l) * pow(P_ij(3, 2), 2) * (  6 * (4-l) * (4-l-1) * pow(P_ij(i, l), 2) * pow(P_ij(i, l+1), 2)
                                                                             + 2 * (4-l) * (4-l-1) * pow(P_ij(i, l), 3) * pow(P_ij(i, l+2), 1))

                + delta(2-l) * pow(P_igj(4, 2), 1-l) * pow(P_ij(3, 2), 3) * ( 4 * factorial(4-l) * P_ij(i,l) * pow(P_ij(i, l+1), 3)
                                                                            + 6 * factorial(4-l) * pow(P_ij(i, l), 2) * pow(P_ij(i, l+1), 1) * pow(P_ij(i, l+2), 1)
                                                                            + 16 * pow(P_ij(i, l), 3) * pow(P_ij(i, l+3), 1))

                + delta(1-l) * pow(P_ij(3, 2), 4) * (  24 * pow(P_ij(i, 1), 4)
                                        + 144 * pow(P_ij(i, 0), 1) * pow(P_ij(i, 1), 2) * pow(P_ij(i, 2), 1)
                                        + 36 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 2), 2)
                                        + 48 * pow(P_ij(i, 0), 2) * pow(P_ij(i, 1), 1) * pow(P_ij(i, 3), 1))
                );
                total += term;
        }
    }
    return total;
}

double compute_divisor() {
    return pow(2, -64) * pow(1 - pow(2, -32), 2) * pow(1 - pow(2, -128), -1);
}

int main() {
    int m;
    printf("Enter m: ");
    scanf("%d", &m);

    double triple_sum_result = compute_triple_sum(m);
    double divisor = compute_divisor();
    double final_result_divided = triple_sum_result / divisor;

    if (triple_sum_result > 0) {
        printf("Log2 Result: %.30f\n", log2(triple_sum_result));
    } else {
        printf("Log2 cannot be computed (result <= 0)\n");
    }

    return 0;
}
