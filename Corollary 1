
#include <stdio.h>
#include <math.h>

double delta(int m) {
    return (m > 0) ? 1.0 : 0.0;
}

double P_i0(int i) {
    return 1 - 4 * delta(i - 1) * pow(255, -1) + 10 * delta(i - 2) * pow(255, -2) - 20 * delta(i - 3) * pow(255, -3);
}

double P_ij(int i, int j) {
    if (j > 0) {
        return delta(i - j) * pow(255, -j) - 4 * delta(i - j - 1) * pow(255, -(j + 1)) + 10 * delta(i - j - 2) * pow(255, -(j + 2));
    } else {
        return P_i0(i);
    }
}

double combination(int n, int k) {
    if (k > n || k < 0) return 0;
    double result = 1;
    for (int i = 1; i <= k; i++) {
        result *= (n - (k - i)) / (double)i;
    }
    return result;
}

double compute_modified_double_sum(int m) {
    double total = 0.0;
    for (int i = 1; i <= 4; i++) {
        for (int l = 0; l <= i - 1; l++) {
            double term = 4 * combination(4, i) * combination(4, l) *
                          P_ij(m, 4 - i) * pow(P_ij(i, l), 4) *
                          pow(P_ij(4, 3), (4 - l));
            total += term;
        }
    }
    return total;
}

double compute_divisor() {
    return pow(2, -94) * pow(1 - pow(2, -32),1) * pow(1 - pow(2, -128), -1);
}

int main() {
    int m;
    printf("Enter m: ");
    scanf("%d", &m);

    double double_sum_result = compute_modified_double_sum(m);
    double divisor = compute_divisor();
    double final_result_divided = double_sum_result / divisor;
    printf("\nFinal result divided to probability of a random permutation: %.16f\n", final_result_divided);
    printf("\nlog2 result: %.16f\n", log2(double_sum_result));

    return 0;
}
