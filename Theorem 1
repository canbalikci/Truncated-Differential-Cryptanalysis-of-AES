#include <stdio.h>
#include <math.h>

double delta(int m) {
    return (m > 0) ? 1.0 : 0.0;
}

double P_i0(int i) {
    return 1 - 4 * delta(i - 1) * pow(255, -1) + 10 * delta(i - 2) * pow(255, -2) - 20 * delta(i - 3) * pow(255, -3);
}

double P_ij(int i, int j) {
    if (j > 0) {
        return delta(i - j) * pow(255, -j) - 4 * delta(i - j - 1) * pow(255, -(j + 1)) + 10 * delta(i - j - 2) * pow(255, -(j + 2));
    } else {
        return P_i0(i);
    }
}

double P_igj(int i, int j) {
    return delta(i - j) * pow(255, -j) - j * (delta(i - j - 1) * pow(255, -(j + 1)) - delta(i - j - 2) * pow(255, -(j + 2)));
}

double combination(int n, int k) {
    if (k > n || k < 0) return 0;
    if (k == 0 || k == n) return 1;
    double result = 1;
    for (int i = 1; i <= k; i++) {
        result *= (n - i + 1) / (double)i;
    }
    return result;
}

double permutation(int n, int r) {
    if (r > n || r < 0) return 0;
    double result = 1;
    for (int i = 0; i < r; i++) {
        result *= (n - i);
    }
    return result;
}

double compute_triple_sum(int m, int j) {
    double total = 0.0;
    for (int i = 1; i <= 4; i++) {
        int min_ij = (i < j) ? i : j;
        for (int l = 0; l <= min_ij - 1; l++) {
            double term = 4 * combination(4, i) * combination(4, l) * P_ij(m, 4 - i) *
                          pow(P_ij(i, l), 4) * pow(P_ij(4, 3), 4 - l) * P_ij(4 - l, 4 - j);
            total += term;
        }
    }
    return total;
}

double compute_divisor() {
    return pow(2, -118) * pow(1 - pow(2, -8), 1) * pow(1 - pow(2, -128), -1);
}

int main() {
    int m, j;
    printf("Enter m: ");
    scanf("%d", &m);
    printf("Enter j: ");
    scanf("%d", &j);

    double triple_sum_result = compute_triple_sum(m, j);
    double divisor = compute_divisor();
    double final_result_divided = triple_sum_result / divisor;
    printf("\nFinal result divided to probability of a random permutation: %.16f\n", final_result_divided);

    return 0;
}
